type CompareFunction<V> = (a: V, b: V) => number;
export default class Collection<K, V> extends Map<K, V> {
  get size(): number;
  map<U>(fn: (val: V, key: K, map: Collection<K, V>) => U): U[];
  mapVal<U>(fn: (val: V, key: K, map: Collection<K, V>) => U): U[];
  first(): V | undefined;
  find(fn: (val: V, key: K, map: Collection<K, V>) => boolean): V | undefined;
  filter(fn: (val: V, key: K, map: Collection<K, V>) => boolean): Collection<K, V>;
  filterKey(fn: (key: K) => boolean): Collection<K, V>;
  last(): V | undefined;
  lastKey(): K | undefined;
  tap(fn: (map: Collection<K, V>) => void): Collection<K, V>;
  has(k: K): boolean;
  array(): V[];
  keyArray(): K[];
  hasAll(...c: K[]): boolean;
  hasAny(...keys: K[]): boolean;
  some(fn: (val: V, key: K, map: Collection<K, V>) => boolean): boolean;
  random(): V | undefined;
  get(k: K): V | undefined;
  every(fn: (val: V, key: K, map: Collection<K, V>) => boolean): boolean;
  each(fn: (val: V, key: K, map: Collection<K, V>) => void): Collection<K, V>;
  randomKey(): K | undefined;
  equals(collection: Collection<K, V>): boolean;
  difference(collection: Collection<K, V>): K[] | string;
  findKey(fn: (val: V, key: K, map: Collection<K, V>) => boolean): K | undefined;
  sort(compareFn: CompareFunction<V> = Collection.defaultCompareFunction): Collection<K, V>;
  clear(): void;
  at(index: number = 0): V | undefined;
  static defaultCompareFunction<V>(a: V, b: V): number;
}
